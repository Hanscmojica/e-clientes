// Configuraci√≥n de la URL base de la API
const apiBase = 'http://localhost:5001';

console.log('üîß Login.js cargado, API base:', apiBase);

// Funci√≥n para mostrar/ocultar contrase√±a (compatibilidad login y modal)
function togglePassword(inputId, btn) {
  // Si no se pasan argumentos, es el bot√≥n del login principal
  if (!inputId || !btn) {
    const passwordInput = document.getElementById('password');
    const toggleBtn = document.querySelector('.toggle-password .material-icons');
    if (passwordInput && toggleBtn) {
      if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        toggleBtn.textContent = 'visibility_off';
      } else {
        passwordInput.type = 'password';
        toggleBtn.textContent = 'visibility';
      }
    }
    return;
  }
  // Si se pasan argumentos, es para los toggles del modal
  const passwordInput = document.getElementById(inputId);
  const toggleBtn = btn.querySelector('.material-icons');
  if (passwordInput && toggleBtn) {
    if (passwordInput.type === 'password') {
      passwordInput.type = 'text';
      toggleBtn.textContent = 'visibility_off';
    } else {
      passwordInput.type = 'password';
      toggleBtn.textContent = 'visibility';
    }
  }
}

// Funci√≥n global para cerrar sesi√≥n - disponible para todas las p√°ginas
function logout() {
  // Eliminar datos de sesi√≥n tanto de localStorage como de sessionStorage
  localStorage.removeItem('userSession');
  localStorage.removeItem('token');
  sessionStorage.removeItem('userSession');
  
  // Redirigir a la p√°gina de login
  window.location.href = 'login.html';
}

// Hacer la funci√≥n logout disponible globalmente
window.logout = logout;

// Mostrar el modal si la contrase√±a ha expirado
function showPasswordExpiredModal() {
  const modal = document.getElementById('passwordExpiredModal');
  if (modal) {
    modal.style.display = 'block';
  }
}

// Cerrar el modal
function closeModal() {
  const modal = document.getElementById('passwordExpiredModal');
  if (modal) {
    modal.style.display = 'none';
  }
}

// Manejar el env√≠o del formulario de cambio de contrase√±a
async function handleChangePassword(e) {
  e.preventDefault();
  const newPassword = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmPassword').value;
  const errorDiv = document.getElementById('loginError');

  if (newPassword !== confirmPassword) {
    if (errorDiv) {
      errorDiv.textContent = 'Las contrase√±as no coinciden';
      errorDiv.style.display = 'block';
    }
    return;
  }

  try {
    const response = await fetch(`${apiBase}/api/auth/change-password-expired`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ newPassword })
    });

    const data = await response.json();

    if (!response.ok) {
      throw new Error(data.message || 'Error al cambiar la contrase√±a');
    }

    alert('Contrase√±a cambiada exitosamente');
    closeModal();
  } catch (error) {
    if (errorDiv) {
      errorDiv.textContent = error.message;
      errorDiv.style.display = 'block';
    }
  }
}
  
// Manejar el env√≠o del formulario de login - VERSI√ìN COMPLETA RESTAURADA
document.addEventListener('DOMContentLoaded', function() {
  const loginForm = document.getElementById('loginForm');
  
  if (loginForm) {
    console.log('‚úÖ Formulario de login encontrado');
    
    loginForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      const rememberMe = document.getElementById('rememberMe')?.checked || false;
      const errorDiv = document.getElementById('loginError');
      const loginButton = document.querySelector('.login-button');
      
      console.log('üîç Iniciando proceso de login para:', username);
      console.log('üîç Recordar sesi√≥n:', rememberMe);
      
      // Limpiar errores previos
      if (errorDiv) {
        errorDiv.style.display = 'none';
        errorDiv.textContent = '';
      }
      
      // Deshabilitar el bot√≥n durante el proceso
      if (loginButton) {
        loginButton.disabled = true;
        loginButton.innerHTML = '<span class="material-icons">hourglass_empty</span> Iniciando sesi√≥n...';
      }
      
      try {
        console.log('üîç Enviando petici√≥n a:', `${apiBase}/api/auth/login`);
        
        const response = await fetch(`${apiBase}/api/auth/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ 
            username: username.trim(), 
            password: password 
          })
        });

        console.log('üîç Status de respuesta:', response.status);
        
        let data;
        try {
          data = await response.json();
          console.log('üîç Datos recibidos del servidor:', data);
        } catch (parseError) {
          console.error('‚ùå Error al parsear JSON:', parseError);
          throw new Error('Respuesta inv√°lida del servidor');
        }

        if (!response.ok) {
          throw new Error(data.message || `Error del servidor: ${response.status}`);
        }

        if (!data.success) {
          throw new Error(data.message || 'Login fall√≥');
        }

        if (!data.token || !data.user) {
          throw new Error('No se recibi√≥ token del servidor');
        }

        console.log('‚úÖ Login exitoso!');
        console.log('‚úÖ Token recibido:', data.token);
        console.log('‚úÖ Usuario:', data.user);
        
        // GUARDAR TOKEN Y SESI√ìN - L√ìGICA COMPLETA RESTAURADA
        localStorage.setItem('token', data.token);
        
        const sessionData = {
          id: data.user.id,
          username: data.user.username,
          name: data.user.name,
          role: data.user.role,
          email: data.user.email,
          token: data.token,
          loginTime: new Date().toISOString()
        };
        
        // Decidir d√≥nde guardar basado en "recordar sesi√≥n"
        if (rememberMe) {
          localStorage.setItem('userSession', JSON.stringify(sessionData));
          console.log('‚úÖ Sesi√≥n guardada en localStorage (persistente)');
        } else {
          sessionStorage.setItem('userSession', JSON.stringify(sessionData));
          console.log('‚úÖ Sesi√≥n guardada en sessionStorage (temporal)');
        }
        
        console.log('‚úÖ Token guardado en localStorage');
        console.log('‚úÖ Sesi√≥n guardada:', sessionData);
        
        // Verificar que se guard√≥ correctamente
        const tokenGuardado = localStorage.getItem('token');
        const sessionGuardadaLocal = localStorage.getItem('userSession');
        const sessionGuardadaSession = sessionStorage.getItem('userSession');
        
        console.log('üîç Verificaci√≥n - Token guardado:', tokenGuardado ? 'S√ç' : 'NO');
        console.log('üîç Verificaci√≥n - Sesi√≥n localStorage:', sessionGuardadaLocal ? 'S√ç' : 'NO');
        console.log('üîç Verificaci√≥n - Sesi√≥n sessionStorage:', sessionGuardadaSession ? 'S√ç' : 'NO');
        
        if (!tokenGuardado || (!sessionGuardadaLocal && !sessionGuardadaSession)) {
          throw new Error('Error al guardar la sesi√≥n localmente');
        }
        
        console.log('‚úÖ Todo guardado correctamente, redirigiendo...');
        
        // Redirigir a la p√°gina de referencias
        window.location.href = 'api.html';

      } catch (error) {
        console.error('‚ùå Error en login:', error);
        
        if (errorDiv) {
          errorDiv.textContent = error.message || 'Error desconocido';
          errorDiv.style.display = 'block';
        }
        
        // Limpiar cualquier dato parcial
        localStorage.removeItem('token');
        localStorage.removeItem('userSession');
        sessionStorage.removeItem('userSession');
        
      } finally {
        // Restaurar bot√≥n
        if (loginButton) {
          loginButton.disabled = false;
          loginButton.innerHTML = '<span class="material-icons">login</span> Iniciar Sesi√≥n';
        }
      }
    });
  } else {
    console.warn('‚ö†Ô∏è Formulario de login no encontrado');
  }

  // Verificar si ya hay una sesi√≥n activa al cargar la p√°gina
  // Solo ejecutar esta l√≥gica si estamos en la p√°gina de login
  if (window.location.pathname.endsWith('login.html') || window.location.pathname === '/') {
    const token = localStorage.getItem('token');
    const userSession = localStorage.getItem('userSession') || sessionStorage.getItem('userSession');
    
    console.log('üîç Verificando sesi√≥n existente...');
    console.log('Token encontrado:', token ? 'S√ç' : 'NO');
    console.log('Sesi√≥n encontrada:', userSession ? 'S√ç' : 'NO');
    
    if (token && userSession) {
      console.log('‚úÖ Sesi√≥n existente encontrada, redirigiendo...');
      // Prevenir parpadeo durante la redirecci√≥n
      document.body.style.display = 'none';
      window.location.replace('api.html');
    }
  }

  // A√±adir evento al formulario de cambio de contrase√±a si existe
  const changePasswordForm = document.getElementById('changePasswordForm');
  if (changePasswordForm) {
    changePasswordForm.addEventListener('submit', handleChangePassword);
    console.log('‚úÖ Event listener para cambio de contrase√±a agregado');
  }
});